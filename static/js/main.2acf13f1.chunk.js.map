{"version":3,"sources":["DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playAudio","bind","assertThisInitialized","handleKeyPress","addActiveClass","removeActiveClass","document","addEventListener","removeEventListener","getElementById","title","classList","add","remove","e","_this2","keyCode","parseInt","setTimeout","audioElem","keyMap","currentTime","play","updateMsgCallback","react_default","a","createElement","className","id","onClick","src","audioURL","Component","App","displayMsg","updateDisplayMsg","msg","setState","src_DrumPad","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2acf13f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass DrumPad extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n    };\r\n\r\n    this.playAudio = this.playAudio.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n    this.addActiveClass = this.addActiveClass.bind(this);\r\n    this.removeActiveClass = this.removeActiveClass.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.handleKeyPress);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this.handleKeyPress);\r\n  }\r\n\r\n  addActiveClass() {\r\n    document.getElementById(this.props.title).classList.add('active');\r\n  }\r\n\r\n  removeActiveClass() {\r\n    document.getElementById(this.props.title).classList.remove('active');\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    if(e.keyCode === parseInt(this.props.keyCode)) {\r\n      this.playAudio();\r\n      this.addActiveClass();\r\n      setTimeout(() => this.removeActiveClass(), 200);\r\n    }\r\n  }\r\n\r\n  playAudio(e) {\r\n    const audioElem = document.getElementById(this.props.keyMap);\r\n    audioElem.currentTime = 0;\r\n    audioElem.play();\r\n    this.props.updateMsgCallback(this.props.title);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"drum-pad\" id={this.props.title} onClick={this.playAudio}>\r\n        <div className=\"pad-label\">\r\n          {this.props.keyMap}\r\n        </div>\r\n        <audio className=\"clip\" id={this.props.keyMap} src={this.props.audioURL} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DrumPad;","import React, { Component } from 'react';\nimport './App.css';\nimport DrumPad from './DrumPad';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displayMsg: \"Let's jam!\"\n    };\n\n    this.updateDisplayMsg = this.updateDisplayMsg.bind(this);\n  }\n\n  updateDisplayMsg(msg) {\n    this.setState({\n      displayMsg: msg\n    });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <div id=\"display\">\n          {this.state.displayMsg}\n        </div>\n\n        <div id=\"pad\">\n          <DrumPad title=\"Heater-1\" keyMap=\"Q\" keyCode=\"81\" audioURL=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\" updateMsgCallback={this.updateDisplayMsg}/>\n          \n          <DrumPad title=\"Heater-2\" keyMap=\"W\" keyCode=\"87\" audioURL=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\" updateMsgCallback={this.updateDisplayMsg}/>\n          \n          <DrumPad title=\"Heater-3\" keyMap=\"E\" keyCode=\"69\" audioURL=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\" updateMsgCallback={this.updateDisplayMsg}/>\n          \n          <DrumPad title=\"Heater-4\" keyMap=\"A\" keyCode=\"65\" audioURL=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\" updateMsgCallback={this.updateDisplayMsg}/>\n          \n          <DrumPad title=\"Clap\" keyMap=\"S\" keyCode=\"83\" audioURL=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\" updateMsgCallback={this.updateDisplayMsg}/>\n          \n          <DrumPad title=\"Open-HH\" keyMap=\"D\" keyCode=\"68\" audioURL=\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\" updateMsgCallback={this.updateDisplayMsg}/>\n          \n          <DrumPad title=\"Kick-n'-Hat\" keyMap=\"Z\" keyCode=\"90\" audioURL=\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\" updateMsgCallback={this.updateDisplayMsg}/>\n          \n          <DrumPad title=\"Kick\" keyMap=\"X\" keyCode=\"88\" audioURL=\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\" updateMsgCallback={this.updateDisplayMsg}/>\n          \n          <DrumPad title=\"Closed-HH\" keyMap=\"C\" keyCode=\"67\" audioURL=\"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\" updateMsgCallback={this.updateDisplayMsg}/>\n        </div>\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('drum-machine'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}